@page "/CrearHabitacion/Edit/{HabitacionId:int}"
@using System.Globalization
@layout EmptyLayout
@inject HabitacionesService habitacionesService
@inject TipoHabitacionService tipoHabitacionService
@inject HabitacionesDetalleService habitacionDetalleService
@inject AgregadosServices agregadosService
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Editar</PageTitle>
<EditForm Model="Habitaciones" OnValidSubmit="Editar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="shadow-lg">

            @*Header*@
            <div class="header text-center">
                <h3><strong>Editar habitación</strong></h3>
            </div>

            @*Body*@
            <div class="card-body">

                @*TipoHabitacion*@
                <div>
                    <label class="form-label">Tipo de Habitación</label>
                    <InputSelect class="form-select" @bind-Value="Habitaciones.TipoHabitacionId">
                        <option value="0" disabled>Seleccione un tipo</option>
                        @foreach (var tipo in ListaTipoHabitaciones)
                        {
                            <option value="@tipo.TipoHabitacionId">@tipo.Descripcion</option>
                        }
                    </InputSelect>
                </div>

                @*NumeroHabitacion*@
                <div>
                    <label class="form-label">Número de habitación</label>
                    <InputText class="form-control" @bind-Value="Habitaciones.NumeroHabitacion"></InputText>
                    <ValidationMessage For="(()=> Habitaciones.NumeroHabitacion)" />
                </div>

                @*PrecioBase*@
                <div>
                    <label class="form-label">Precio Base</label>
                    <InputNumber class="form-control" @bind-Value="Habitaciones.PrecioBase"></InputNumber>
                    <ValidationMessage For="(()=> Habitaciones.PrecioBase)" />
                </div>

                @*Capacidad*@
                <div>
                    <label class="form-label">Capacidad</label>
                    <InputNumber class="form-control" @bind-Value="Habitaciones.Capacidad"></InputNumber>
                    <ValidationMessage For="(()=> Habitaciones.Capacidad)" />
                </div>

                @*Detalle*@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalle de Agregados</h5>
                    <div class="input-group align-items-center mt-2">
                        <InputSelect class="form-select" @bind-Value=DetalleSeleccionado.AgregadoId>
                            <option value="0" selected disabled>Seleccione un agregado</option>
                            @foreach (var agregado in ListaAgregados)
                            {
                                <option value="@agregado.AgregadoId">@agregado.Descripcion (@agregado.Precio)</option>
                            }
                        </InputSelect>

                        <label class="col-form-label input-group-text">Cantidad:</label>
                        <InputNumber class="form-control" @bind-Value="DetalleSeleccionado.Cantidad"></InputNumber>

                        <button type="button" class="btn btn-outline-success bi bi-plus" @onclick=AgregarDetalle>Agregar</button>
                    </div>

                    <table class="table table-bordered mt-3">
                        <thead>
                            <tr>
                                <th>Agregado</th>
                                <th>Cantidad</th>
                                <th>Precio</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in Habitaciones.HabitacionDetalles)
                            {
                                <tr>
                                    <td>@detalle.AgregadoId</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>@detalle.Precio.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</td>
                                    <td>
                                        <button @onclick="@(() => RemoverDetalle(detalle))" class="btn btn-danger bi bi-trash">Remover</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @*MontoTotal*@
                <div>
                    <label class="form-label">Monto Total</label>
                    <InputNumber class="form-control" @bind-Value="Habitaciones.MontoTotal" ReadOnly="true"></InputNumber>
                    <ValidationMessage For="(()=> Habitaciones.MontoTotal)" />
                </div>
            </div>

            @*Footer*@
            <div class="footer">
                <button type="button" class="btn btn-primary" @onclick="() => Volver()">Volver</button>
                <button type="submit" class="btn btn-success">Guardar</button>
            </div>
        </div>
    </div>
    @Mensaje
</EditForm>



@code {
    [Parameter]
    public int HabitacionId { get; set; }
    public Habitaciones Habitaciones { get; set; } = new Habitaciones();
    public Agregados Agregados { get; set; } = new Agregados();
    public HabitacionDetalle DetalleSeleccionado { get; set; } = new HabitacionDetalle();
    public List<TipoHabitaciones> ListaTipoHabitaciones { get; set; } = new();
    public List<HabitacionDetalle> ListaHabitacionDetalle { get; set; } = new();
    public List<Agregados> ListaAgregados { get; set; } = new();
    public List<Habitaciones> ListaHabitaciones { get; set; } = new();
    public string Mensaje { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Habitaciones = await habitacionesService.Buscar(HabitacionId);
        ListaTipoHabitaciones = await tipoHabitacionService.Listar(t => true);
        ListaHabitaciones = await habitacionesService.Listar(t => true);
        ListaAgregados = await agregadosService.Listar(t => true);
        ListaHabitacionDetalle = await habitacionDetalleService.ListarDetalle(HabitacionId);
    }

    public async Task Editar()
    {

        var crear = await habitacionesService.Guardar(Habitaciones);
        if (crear)
        {
            Mensaje = "Se ha modificado correctamente.";
            Volver();
        }

        else
        {
            Mensaje = "No se ha podido editar la cotización. ";
        }
    }

    public void AgregarDetalle()
    {
        if (DetalleSeleccionado.AgregadoId == 0 || DetalleSeleccionado.Cantidad <= 0)
        {
            return;
        }

        var agregadoSeleccionado = ListaAgregados.FirstOrDefault(a => a.AgregadoId == DetalleSeleccionado.AgregadoId);

        if (agregadoSeleccionado != null)
        {
            var precioTotal = agregadoSeleccionado.Precio * DetalleSeleccionado.Cantidad;

            Habitaciones.HabitacionDetalles.Add(new HabitacionDetalle
                {
                    AgregadoId = agregadoSeleccionado.AgregadoId,
                    Precio = precioTotal,
                    Cantidad = DetalleSeleccionado.Cantidad
                });

            Habitaciones.MontoTotal = Habitaciones.PrecioBase;
            foreach (var detalle in Habitaciones.HabitacionDetalles)
            {
                Habitaciones.MontoTotal += detalle.Precio;
            }

            DetalleSeleccionado = new HabitacionDetalle();
        }
    }

    public void RemoverDetalle(HabitacionDetalle eliminarDetalle)
    {
        Habitaciones.HabitacionDetalles.Remove(eliminarDetalle);

        Habitaciones.MontoTotal = Habitaciones.PrecioBase;

        foreach (var detalle in Habitaciones.HabitacionDetalles)
        {
            Habitaciones.MontoTotal += detalle.Precio;
        }

        DetalleSeleccionado = new HabitacionDetalle();
    }
    public void Volver()
    {
        navigationManager.NavigateTo("/GestionHotel/CrearHabitacion");
    }
}
