@page "/Reservas/Create/{HabitacionId:int}/{FechaInicio}/{FechaFinal}"
@using System.Globalization
@inject HabitacionesService habitacionesService
@inject ReservasService reservasServices
@inject NavigationManager navigationManager
@inject ArticulosExtrasSerive articulosExtrasService
@inject TipoHabitacionService tipoHabitacionService
@inject MetodoPagoService metodoPagoService
@inject ClientesService clientesService
@inject ToastService toastService

@rendermode InteractiveServer
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />

<PageTitle>Create</PageTitle>
<EditForm Model="Reservas" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="shadow-lg">

            @*Header*@
            <div class="header text-center">
                <h3><strong>Crear Reserva </strong></h3>
            </div>

            @*Body*@
            <div class="card-body">

                @* Información de la habitación seleccionada *@
                <div>
                    <strong>Tipo de habitaci&oacute;n: </strong>@TipoHabitaciones.Categoria
                    <br />
                    <strong>Habitación: </strong> @Habitaciones.NumeroHabitacion
                    <br />
                    <strong>Fecha de Inicio: </strong> @Reservas.FechaInicio?.ToString("yyyy-MM-dd")
                    <br />
                    <strong>Fecha Final: </strong> @Reservas.FechaFinal?.ToString("yyyy-MM-dd")
                    <br />
                    <strong>Capacidad: </strong> @Habitaciones.Capacidad
                    <br />
                    <strong>Precio Base: </strong> @Habitaciones.MontoTotal.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))
                </div>

                @*Detalle*@
                <div class="border border-success p-3 mt-3">
                    <h5>Detalle de Reserva</h5>
                    <div class="input-group align-items-center mt-2">
                        <InputSelect class="form-select" @bind-Value=DetalleSeleccionado.ExtrasId>
                            <option value="0" selected disabled>Seleccione un articulo extra</option>
                            @foreach (var extra in ListaArticulosExtras)
                            {
                                <option value="@extra.ExtrasId">@extra.Descripcion (@extra.Precio.ToString("C", CultureInfo.CreateSpecificCulture("en-US")))</option>
                            }
                        </InputSelect>

                        <label class="col-form-label input-group-text">Cantidad:</label>
                        <InputNumber class="form-control" @bind-Value="DetalleSeleccionado.Cantidad"></InputNumber>

                        <button type="button" class="btn btn-outline-success bi bi-plus" @onclick=AgregarDetalle>Agregar</button>
                    </div>

                    <table class="table table-bordered mt-3">
                        <thead>
                            <tr>
                                <th>Extra</th>
                                <th>Cantidad</th>
                                <th>Precio</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in Reservas.ReservasDetalles)
                            {
                                <tr>
                                    <td>@detalle.ExtrasId</td>
                                    <td>@detalle.Cantidad</td>
                                    <td>@detalle.Precio.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</td>
                                    <td>

                                        <button @onclick="@(() => RemoverDetalle(detalle))" class="btn btn-danger bi bi-trash">Remover</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @*MontoTotal*@
                <div>
                    <label class="form-label">Monto Total</label>
                    <InputNumber class="form-control" @bind-Value="Reservas.Total" ReadOnly="true"></InputNumber>
                    <ValidationMessage For="(()=> Reservas.Total)" />
                </div>

                <div class="container-info">
                    <div class="container-cliente">
                        @*Informacion del cliente*@
                        <h4>Informaci&oacute;n del huesped</h4>
                        @*Nombre*@
                        <div class="col-2 mt-2">
                            <label class="form-label"><strong>Nombre y apellido</strong></label>
                            <InputText class="form-control" @bind-Value="Cliente.Nombres"></InputText>
                            <ValidationMessage For="(()=> Cliente.Nombres)" />
                        </div>

                        @*Telefono*@
                        <div class="col-2 mt-2">
                            <label class="form-label"><strong>Tel&eacute;fono</strong></label>
                            <InputText class="form-control" placeholder=" Ej: 809-1231456" @bind-Value="Cliente.Telefono"></InputText>
                            <ValidationMessage For="(()=> Cliente.Telefono)" />
                        </div>

                        @*Email*@
                        <div class="col-2 mt-2">
                            <label class="form-label"><strong>Email</strong></label>
                            <InputText class="form-control" @bind-Value="Cliente.Email"></InputText>
                            <ValidationMessage For="(()=> Cliente.Email)" />
                        </div>

                        @*Cedula*@
                        <div class="col-2 mt-2">
                            <label class="form-label"><strong>C&eacute;dula</strong></label>
                            <InputText class="form-control" @bind-Value="Cliente.Cedula"></InputText>
                            <ValidationMessage For="(()=> Cliente.Cedula)" />
                        </div>

                    </div>
                    <div class="container-metodopago">

                        @* Metodo de pago *@
                        <h4>M&eacute;todo de pago</h4>
                        @*Nombre*@
                        <div class="col-2 mt-2">
                            <label class="form-label"><strong>Nombre y apellido</strong></label>
                            <InputText class="form-control" @bind-Value="MetodoPago.NombresApellido"></InputText>
                            <ValidationMessage For="(()=> MetodoPago.NombresApellido)" />
                        </div>

                        @*Numero de tarjeta*@
                        <div class="col-2 mt-2">
                            <label class="form-label"><strong>Numero de tarjeta</strong></label>
                            <InputText class="form-control" @bind-Value="MetodoPago.NumeroTarjeta"></InputText>
                            <ValidationMessage For="(()=> MetodoPago.NumeroTarjeta)" />
                        </div>

                        @*Fecha de expiracion*@
                        <div class="col-2 mt-2">
                            <label class="form-label"><strong>Fecha de expiracion</strong></label>
                            <InputText class="form-control" placeholder= " Ej: 04/2024" @bind-Value="MetodoPago.FechaExpiracion"></InputText>
                            <ValidationMessage For="(()=> MetodoPago.FechaExpiracion)" />
                        </div>

                        @*CVC*@
                        <div class="col-2 mt-2">
                            <label class="form-label"><strong>CVC</strong></label>
                            <InputText class="form-control" @bind-Value="MetodoPago.CodigoSeguridad"></InputText>
                            <ValidationMessage For="(()=> MetodoPago.CodigoSeguridad)" />
                        </div>
                    </div>
                </div>
            </div>

            @*Modal*@
            <Modal @ref="modal" title="Modal title" IsVerticallyCentered="true">
                <BodyTemplate>
                    <Icon Name="IconName.CreditCard"></Icon>
                    Pago realizado con exito.
                </BodyTemplate>
                <FooterTemplate>
                    <Button Color="ButtonColor.Primary">Guardar</Button>
                </FooterTemplate>
            </Modal>

            @*Footer*@
            <div class="footer">
                <button type="button" class="btn btn-primary" @onclick="() => Volver()">Volver</button>
                <button type="submit" class="btn btn-success">Guardar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int HabitacionId { get; set; }
    [Parameter]
    public string FechaInicio { get; set; } = string.Empty;
    [Parameter]
    public string FechaFinal { get; set; } = string.Empty;

    public ArticulosExtras ArticulosExtras { get; set; } = new ArticulosExtras();
    public Habitaciones Habitaciones { get; set; } = new Habitaciones();
    public Reservas Reservas { get; set; } = new Reservas();
    public ReservasDetalle DetalleSeleccionado { get; set; } = new ReservasDetalle();
    public List<ReservasDetalle> ListaReservaDetalle { get; set; } = new List<ReservasDetalle>();
    public List<ArticulosExtras> ListaArticulosExtras { get; set; } = new List<ArticulosExtras>();
    public List<Habitaciones> ListaHabitaciones { get; set; } = new List<Habitaciones>();
    public List<Reservas> ListaReservas { get; set; } = new List<Reservas>();

    public TipoHabitaciones TipoHabitaciones { get; set; } = new TipoHabitaciones();

    public MetodoPago MetodoPago { get; set; } = new MetodoPago();

    public Clientes Cliente { get; set; } = new Clientes();

    public List<ToastMessage> Mensaje { get; set; } = [];
    public void Notificacion(ToastType toastType, string title, string message) => Mensaje.Add(ShowToast(toastType, title, message));

    protected override async Task OnInitializedAsync()
    {
        Habitaciones = await habitacionesService.Buscar(HabitacionId);
        if (Habitaciones != null)
        {
            Reservas.HabitacionId = HabitacionId;
        }

        if (!string.IsNullOrEmpty(FechaInicio) && !string.IsNullOrEmpty(FechaFinal))
        {
            Reservas.FechaInicio = DateTime.ParseExact(FechaInicio, "yyyy-MM-dd", CultureInfo.InvariantCulture);
            Reservas.FechaFinal = DateTime.ParseExact(FechaFinal, "yyyy-MM-dd", CultureInfo.InvariantCulture);
        }

        ListaArticulosExtras = await articulosExtrasService.Listar(a => true);
        TipoHabitaciones = await tipoHabitacionService.Buscar(Habitaciones.TipoHabitacionId);
    }

    public async Task Guardar()
    {
        await modal.ShowAsync();
        Cliente.Reservas = Reservas;
        var cliente = await clientesService.Guardar(Cliente);
        var reserva = await reservasServices.Guardar(Reservas);
        var metodoPago = await metodoPagoService.Guardar(MetodoPago);

        if (reserva && metodoPago && cliente)
        {
            Notificacion(ToastType.Success, "Reserva", "Se ha creado correctamente ");
            await Task.Delay(1500);
        }

        else
        {
            Notificacion(ToastType.Success, "Reserva", "No se podido crear la reserva ");
            await Task.Delay(1500);
        }

    }


    public void AgregarDetalle()
    {

        if (DetalleSeleccionado.ExtrasId == 0 || DetalleSeleccionado.Cantidad <= 0)
        {
            return;
        }

        var extrasSeleccionado = ListaArticulosExtras.FirstOrDefault(e => e.ExtrasId == DetalleSeleccionado.ExtrasId);

        if (extrasSeleccionado != null)
        {
            var precioTotal = extrasSeleccionado.Precio * DetalleSeleccionado.Cantidad;

            Reservas.ReservasDetalles.Add(new ReservasDetalle
                {
                    ExtrasId = extrasSeleccionado.ExtrasId,
                    Precio = precioTotal,
                    Cantidad = DetalleSeleccionado.Cantidad

                });

            Reservas.Total = Habitaciones.MontoTotal + precioTotal;
            foreach (var detalle in Reservas.ReservasDetalles)
            {
                Reservas.Total += detalle.Precio;
            }

            DetalleSeleccionado = new ReservasDetalle();
        }
    }

    public void RemoverDetalle(ReservasDetalle eliminarDetalle)
    {
        Reservas.ReservasDetalles.Remove(eliminarDetalle);

        Reservas.Total = Habitaciones.MontoTotal;

        foreach (var detalle in Reservas.ReservasDetalles)
        {
            Reservas.Total += detalle.Precio;
        }

        DetalleSeleccionado = new ReservasDetalle();
    }
    public void Volver()
    {
        navigationManager.NavigateTo("/Reservas");
    }

    private Modal modal = default!;

    public async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    public async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }

    private ToastMessage ShowToast(ToastType toastType, string title, string message)
    {
        var mensaje = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                HelpText = $"{DateTime.Now.ToString("dd/MM/yyyy")}",
                Message = $"{message}. A las {DateTime.Now.ToString("hh:mm tt")}",
            };
        toastService.Notify(mensaje);
        return mensaje;
    }
}
