@page "/Reservas"
@using System.Globalization
@rendermode InteractiveServer
@inject HabitacionesService habitacionesService
@inject ReservasService reservasService
@inject NavigationManager navigationManager
<Toasts class="p-3" AutoHide="true" Delay="4000" Placement="ToastsPlacement.TopRight" />
@inject ToastService toastService

<PageTitle>Index</PageTitle>
<EditForm Model="reservas" OnValidSubmit="FiltrarHabitaciones">
    <DataAnnotationsValidator/>

    <div class="container mt-4">
        <h2 class="text-center mb-4">Listado de Habitaciones Disponibles</h2>

        @* Filtro por fechas  *@
        <div class="row mb-4">
            <div class="col-md-3">
                <label>Fecha de Inicio</label>
                <InputDate @bind-Value="reservas.FechaInicio" class="form-control"
                           min="@DateTime.Now.ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-3">
                <label>Fecha Final</label>
                <InputDate @bind-Value="reservas.FechaFinal" class="form-control"
                           min="@reservas.FechaInicio?.AddDays(1).ToString("yyyy-MM-dd")" />
            </div>
            <div class="col-md-3 align-self-end">
                <button class="btn btn-primary" @onclick="FiltrarHabitaciones">Filtrar Habitaciones</button>
            </div>
            <div class="col-md-3 align-self-end">
                <button class="btn btn-secondary" @onclick="Restablecer">Restablecer</button>
            </div>
        </div>

         @* Tabla para mostrar las habitaciones *@
        <table class="table table-bordered">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Número de Habitación</th>
                    <th>Tipo de Habitación</th>
                    <th>Descripción</th>
                    <th>Capacidad</th>
                    <th>Precio</th>
                    <th>Ver más</th>
                </tr>
            </thead>
            <tbody>
                @if (ListaHabitaciones.Count == 0)
                {
                    <tr>
                        <td colspan="7" class="text-center">No hay habitaciones disponibles.</td>
                    </tr>
                }
                else
                {
                    @foreach (var habitacion in ListaHabitaciones)
                    {
                        <tr>
                            <td>@habitacion.HabitacionId</td>
                            <td>@habitacion.NumeroHabitacion</td>
                            <td>@habitacion.TipoHabitaciones?.Categoria</td>
                            <td>@habitacion.TipoHabitaciones?.Descripcion</td>
                            <td>@habitacion.Capacidad</td>
                            <td>@habitacion.PrecioBase.ToString("C", CultureInfo.CreateSpecificCulture("en-US"))</td>
                            <td>
                                <button type="button" class="btn btn-success" @onclick="() => IrCrearReserva(habitacion.HabitacionId)">Ver</button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
        @*Footer*@
        <div class="footer">
            <p><strong>Cantidad de habitaciones disponibles: </strong>@ListaHabitaciones.Count</p>
        </div>
    </div>

</EditForm>

@code {
    public Reservas reservas { get; set; } = new Reservas();
    public List<Habitaciones> ListaHabitaciones { get; set; } = new List<Habitaciones>();
    public List<ToastMessage> Mensaje { get; set; } = [];
    public void Notificacion(ToastType toastType, string title, string message) => Mensaje.Add(ShowToast(toastType, title, message));

    protected override async Task OnInitializedAsync()
    {
        ListaHabitaciones = await habitacionesService.ListarConDetalles();
    }

    private ToastMessage ShowToast(ToastType toastType, string title, string message)
    {
        var mensaje = new ToastMessage()
            {
                Type = toastType,
                Title = title,
                HelpText = $"{DateTime.Now.ToString("dd/MM/yyyy")}",
                Message = $"{message}. A las {DateTime.Now.ToString("hh:mm tt")}",
            };
        toastService.Notify(mensaje);
        return mensaje;
    }

    private async Task FiltrarHabitaciones()
    {
        if (reservas.FechaInicio.HasValue && reservas.FechaFinal.HasValue)
        {
            if (reservas.FechaInicio.Value.Date < DateTime.Now.Date)
            {         
                return;
            }

            if (reservas.FechaFinal.Value.Date < reservas.FechaInicio.Value.Date)
            {           
                return;
            }

            ListaHabitaciones = await habitacionesService.Listar(h =>
                !h.Reservas.Any(r =>
                    r.FechaInicio < reservas.FechaFinal.Value &&
                    r.FechaFinal > reservas.FechaInicio.Value));         
        }
        
        else
        {
            Notificacion(ToastType.Warning, "Hotel Sunset", "Por favor, seleccione ambas fechas");
            
        }
    }

    private async Task Restablecer()
    {
        ListaHabitaciones = await habitacionesService.ListarConDetalles();
        reservas.FechaInicio = null;
        reservas.FechaFinal = null;
    }

    private async Task IrCrearReserva(int habitacionId)
    {
        if (!reservas.FechaInicio.HasValue || !reservas.FechaFinal.HasValue)
        {
            Notificacion(ToastType.Success, "Hotel Sunset", "Por favor, selecciona ambas fechas antes de continuar");
            await Task.Delay(1500);
            return;
        }
        navigationManager.NavigateTo($"/Reservas/Create/{habitacionId}/{reservas.FechaInicio:yyyy-MM-dd}/{reservas.FechaFinal:yyyy-MM-dd}");
    }
}
